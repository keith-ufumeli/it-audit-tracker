import { NextRequest, NextResponse } from "next/server"
import { getServerSession } from "next-auth"
import { authOptions } from "@/lib/auth"
import { reportGenerator } from "@/lib/report-generator"

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session) {
      return NextResponse.json(
        { error: "Unauthorized" },
        { status: 401 }
      )
    }

    const adminRoles = ["super_admin", "audit_manager", "auditor", "management"]
    if (!adminRoles.includes(session.user.role)) {
      return NextResponse.json(
        { error: "Forbidden" },
        { status: 403 }
      )
    }

    const body = await request.json()
    const { reportType, config } = body

    if (!reportType) {
      return NextResponse.json(
        { error: "Report type is required" },
        { status: 400 }
      )
    }

    let pdf
    const reportConfig = {
      title: config?.title || `${reportType} Report`,
      subtitle: config?.subtitle || `Generated by ${session.user.name}`,
      includeCharts: config?.includeCharts || true,
      includeDetails: config?.includeDetails || true,
      dateRange: config?.dateRange,
      filters: config?.filters
    }

    switch (reportType) {
      case 'audit':
        pdf = reportGenerator.generateAuditReport(reportConfig)
        break
      case 'compliance':
        pdf = reportGenerator.generateComplianceReport(reportConfig)
        break
      case 'activity':
        pdf = reportGenerator.generateActivityReport(reportConfig)
        break
      default:
        return NextResponse.json(
          { error: "Invalid report type" },
          { status: 400 }
        )
    }

    // Convert PDF to base64 for transmission
    const pdfOutput = pdf.output('arraybuffer')
    const base64 = Buffer.from(pdfOutput).toString('base64')

    return NextResponse.json({
      success: true,
      data: {
        base64,
        filename: `${reportType}-report-${new Date().toISOString().split('T')[0]}.pdf`,
        mimeType: 'application/pdf'
      }
    })
  } catch (error) {
    console.error("Error generating report:", error)
    return NextResponse.json(
      { error: "Failed to generate report" },
      { status: 500 }
    )
  }
}
